import Personagem.Personagem;
import Personagem.Atributo.Atributo;
import Personagem.Racas.*;
import Personagem.Racas.Anao.Anao;
import Personagem.Racas.Celestial.Celestial;
import Personagem.Racas.Demoniaco.Demoniaco;
import Personagem.Racas.Elfo.Elfo;
import Personagem.Racas.Gigante.Gigante;
import Personagem.Racas.Gnomo.Gnomo;
import Personagem.Racas.Humano.Humano;
import Personagem.Roles.Assassino.Subclasse.*;
import Personagem.Roles.Atirador.Subclasse.*;
import Personagem.Roles.Lutador.Subclasse.*;
import Personagem.Roles.Mago.Subclasse.*;
import Personagem.Roles.Suporte.Subclasse.*;
import Personagem.Roles.Tank.Subclasse.*;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

public class Persistencia {

    public static void salvarPersonagem(Personagem personagem) {
        String sql = "INSERT INTO personagens (nome, roles, raca, atributo) VALUES (?, ?, ?, ?)";

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, personagem.getNome());
            stmt.setString(2, personagem.getRole().getClass().getSimpleName());
            stmt.setString(3, personagem.getRaca().getClass().getSimpleName());
            stmt.setString(4, personagem.getAtributo().toString());

            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static ArrayList<Personagem> carregarPersonagens() {
        ArrayList<Personagem> personagens = new ArrayList<>();
        String sql = "SELECT * FROM personagens";

        try (Connection conn = DatabaseConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                String nome = rs.getString("nome");
                String roleString = rs.getString("roles");
                String racaString = rs.getString("raca");
                Atributo atributo = new Atributo(rs.getString("atributo")) {
                    @Override
                    public void distribuirPontos(int forcaPontos, int destrezaPontos, int inteligenciaPontos, int defesaPontos, int vidaPontos, int manaPontos) {

                    }
                };

                Raca raca = criarRacaPorNome(racaString, atributo);
                Personagem personagem = criarPersonagemPorRole(nome, roleString, raca, atributo);

                if (personagem != null) {
                    personagens.add(personagem);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return personagens;
    }
    public static void removerPersonagem(String nome) {
        String sql = "DELETE FROM personagens WHERE nome = ?";

        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, nome);
            int rowsAffected = stmt.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("Personagem " + nome + " removido com sucesso.");
            } else {
                System.out.println("Nenhum personagem encontrado com o nome: " + nome);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    private static Personagem criarPersonagemPorRole(String nome, String role, Raca raca, Atributo atributo) {
        switch (role) {
            case "Reaper":
                return new Reaper(nome, raca, atributo);
            case "Samurai":
                return new Samurai(nome, raca, atributo);
            case "Viper":
                return new Viper(nome, raca, atributo);
            case "DeadEye":
                return new DeadEye(nome, raca, atributo);
            case "Gunner":
                return new Gunner(nome, raca, atributo);
            case "Hunter":
                return new Hunter(nome, raca, atributo);
            case "Berserker":
                return new Berserker(nome, raca, atributo);
            case "Guerreiro":
                return new Guerreiro(nome, raca, atributo);
            case "Monk":
                return new Monk(nome, raca, atributo);
            case "BlackMage":
                return new BlackMage(nome, raca, atributo);
            case "Necromancer":
                return new Necromancer(nome, raca, atributo);
            case "Summoner":
                return new Summoner(nome, raca, atributo);
            case "Clerigo":
                return new Clerigo(nome, raca, atributo);
            case "Sage":
                return new Sage(nome, raca, atributo);
            case "WhiteMage":
                return new WhiteMage(nome, raca, atributo);
            case "Barbaro":
                return new Barbaro(nome, raca, atributo);
            case "Paladino":
                return new Paladino(nome, raca, atributo);
            case "Warrior":
                return new Warrior(nome, raca, atributo);
            default:
                System.out.println("Role não encontrado: " + role);
                return null;
        }
    }

    private static Raca criarRacaPorNome(String racaNome, Atributo atributo) {
        switch (racaNome) {
            case "Anao":
                return new Anao(atributo);
            case "Celestial":
                return new Celestial(atributo);
            case "Demoniaco":
                return new Demoniaco(atributo);
            case "Elfo":
                return new Elfo(atributo);
            case "Gigante":
                return new Gigante(atributo);
            case "Gnomo":
                return new Gnomo(atributo);
            case "Humano":
                return new Humano(atributo);
            default:
                System.out.println("Raça não encontrada: " + racaNome);
                return null;
        }
    }


}
